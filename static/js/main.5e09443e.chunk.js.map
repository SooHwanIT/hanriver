{"version":3,"sources":["HanRiver.js","action.js","App.js","reportWebVitals.js","reducer.js","index.js"],"names":["HanRiver","riverInfo","useSelector","state","data","requestStatus","status","useState","query","setQuery","weather","setWeather","dispatch","useDispatch","useEffect","type","axios","get","then","response","payload","catch","error","console","log","api","key","base","className","main","temp","placeholder","onChange","e","target","value","onKeyPress","fetch","res","json","result","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","style","fontSize","time","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initalState","reducer","action","store","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e09443e.chunk.js","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect, useState } from 'react';\r\nimport { getHanRiver } from './action';\r\nimport './style.css'\r\nconst HanRiver = () => {\r\n    let riverInfo = useSelector(state => state.data);\r\n    let requestStatus = useSelector(state => state.status);\r\n\r\n    const [query, setQuery] = useState('seoul');\r\n    const [weather, setWeather] = useState({});\r\n    \r\n    const search = e => {\r\n        if (e.key === \"Enter\") {\r\n            fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n                .then(res => res.json())\r\n                .then(result => {\r\n                    setWeather(result);\r\n                    setQuery('');\r\n                    console.log(result);\r\n                });\r\n        }\r\n    }\r\n    const dateBuilder = (d) => {\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Tuesday\", \"Friday\", \"Saturday\"];\r\n        let day = days[d.getDay()];\r\n        let date = d.getDate();\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n        return `${day} ${date} ${month} ${year}`\r\n    }\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getHanRiver());\r\n    }, [dispatch]);\r\n\r\n    const api = {\r\n        key: \"70ece625277cedfcb615419cd0cdbdb8\",\r\n        base: \"https://api.openweathermap.org/data/2.5/\"\r\n    }\r\n\r\n    if (requestStatus === 'PENDING') {\r\n        return (\r\n            <div className=\"loaer\">\r\n                로딩중...\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={\r\n            (typeof weather.main != \"undefined\")\r\n                ? ((weather.main.temp > 16)\r\n                    ? 'hanriver'\r\n                    : 'hanriver2')\r\n                : 'hanriver'}>\r\n            <div className=\"hanriver-info\">\r\n                <div >\r\n                    <main>\r\n                        <div className=\"search-box\">\r\n                            <p>현재 지역을 입력해 주세요</p>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"search-bar\"\r\n                                placeholder=\"Search..\"\r\n                                onChange={e => setQuery(e.target.value)}\r\n                                value={query}\r\n                                onKeyPress={search} />\r\n                                \r\n                        </div>\r\n                        {(typeof weather.main != \"undefined\") ? (\r\n                            <div>\r\n                            <div className=\"location-box\">\r\n                                <div className=\"location\">현재 지역 : {weather.name}, {weather.sys.country}</div>\r\n                                <div className=\"date\">날짜 : {dateBuilder(new Date())}</div>\r\n                            </div>\r\n                                <div className=\"weather-box\">\r\n                                    <div className=\"temp\">\r\n                                        현재 온도 : {Math.round(weather.main.temp)}°C\r\n                                    </div>\r\n                                    <div className=\"weather\">날씨 : {weather.weather[0].main} </div>\r\n                                </div>\r\n                            </div>\r\n                            ) : ('')}\r\n                    <div  className=\"tick\">\r\n                      </div>\r\n                    </main>\r\n                </div>\r\n                    <hr/>\r\n            <div>\r\n                <div style={{ fontSize: 10 }}>현제 한강 온도</div>\r\n                <div style={{ fontSize: 15 }}>{riverInfo.temp}</div>\r\n                <div style={{ fontSize: 10 }}>{riverInfo.time}</div>\r\n            </div>\r\n        </div>\r\n\r\n        </div >\r\n    )\r\n};\r\n\r\nexport default HanRiver;","import axios from 'axios';\r\n\r\nexport const getHanRiver = () => {\r\n    return ( dispatch) =>{\r\n        dispatch({type : 'REQUEST_PENDING'});\r\n\r\n    axios.get('https://hanriver.herokuapp.com/').then(response => {\r\n        dispatch({\r\n            type : 'REQUEST_SUCCESS',\r\n            payload:response.data\r\n        });\r\n    }).catch(error => {\r\n        console.log(error);\r\n        dispatch({type:'REQUEST_FAILURL'});\r\n    })\r\n}\r\n};","import HanRiver from './HanRiver'\n\nfunction App() {\n  return (\n    <HanRiver/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initalState = {\r\n    status:'SUCCESS',\r\n    data:{\r\n        temp : '',\r\n        time : ''\r\n    }\r\n}\r\n\r\nconst reducer = (state = initalState, action)=>{\r\n    switch(action.type){\r\n        case 'REQUEST_PENDING':\r\n        return{\r\n            ...state,\r\n            status: 'PENDING'\r\n        }\r\n        case 'REQUEST_SUCCESS' :\r\n        return{\r\n            status : 'SUCCESS',\r\n            data : action.payload\r\n        }\r\n\r\n        case 'REQUEST_FAILURE':\r\n            return {\r\n                ...state,\r\n                status:'ERROR'\r\n            }\r\n            default :\r\n            return state;\r\n    }\r\n}\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reducer from './reducer';\nimport {createStore, applyMiddleware} from 'redux'; \nimport { Provider} from 'react-redux';\nimport ReduxThunk from 'redux-thunk';\n\nlet store = createStore(reducer, applyMiddleware(ReduxThunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}